// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (
    first_name,
    last_name,
    email,
    password
) VALUES (
    $1,
    $2,
    $3,
    $4
) RETURNING id, email, first_name, last_name, password, user_active, created_at, updated_at
`

type CreateUserParams struct {
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Email     string      `json:"email"`
	Password  string      `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByUnqiueID = `-- name: DeleteUserByUnqiueID :one
DELETE FROM Users
WHERE $1 = id OR
      $2 ilike email
RETURNING id, email, first_name, last_name, password, user_active, created_at, updated_at
`

type DeleteUserByUnqiueIDParams struct {
	ID    pgtype.UUID `json:"id"`
	Email string      `json:"email"`
}

func (q *Queries) DeleteUserByUnqiueID(ctx context.Context, arg DeleteUserByUnqiueIDParams) (User, error) {
	row := q.db.QueryRow(ctx, deleteUserByUnqiueID, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUsers = `-- name: DeleteUsers :many
DELETE FROM Users
WHERE ($1::uuid[] IS NOT NULL AND id = ANY($1::uuid[])) OR
      ($2::text[] IS NOT NULL AND email = ANY($2::text[]))
RETURNING id, email, first_name, last_name, password, user_active, created_at, updated_at
`

type DeleteUsersParams struct {
	Ids    []pgtype.UUID `json:"ids"`
	Emails []string      `json:"emails"`
}

func (q *Queries) DeleteUsers(ctx context.Context, arg DeleteUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, deleteUsers, arg.Ids, arg.Emails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Password,
			&i.UserActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAll = `-- name: GetAll :many

SELECT id, email, first_name, last_name, password, user_active, created_at, updated_at FROM Users
OFFSET $1
LIMIT $2
`

type GetAllParams struct {
	Offset int64 `json:"offset"`
	Limit  int64 `json:"limit"`
}

func (q *Queries) GetAll(ctx context.Context, arg GetAllParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAll, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.Password,
			&i.UserActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByUnqiueID = `-- name: GetUserByUnqiueID :one
SELECT id, email, first_name, last_name, password, user_active, created_at, updated_at FROM Users
WHERE $1 = id or $2 ilike email
LIMIT 1
`

type GetUserByUnqiueIDParams struct {
	ID    pgtype.UUID `json:"id"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) GetUserByUnqiueID(ctx context.Context, arg GetUserByUnqiueIDParams) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUnqiueID, arg.ID, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE Users
SET first_name = $1,
    last_name = $2,
    user_active = $3
WHERE id = $4
RETURNING id, email, first_name, last_name, password, user_active, created_at, updated_at
`

type UpdateUserParams struct {
	FirstName  pgtype.Text `json:"first_name"`
	LastName   pgtype.Text `json:"last_name"`
	UserActive pgtype.Bool `json:"user_active"`
	ID         pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.UserActive,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserEmail = `-- name: UpdateUserEmail :one
UPDATE Users
SET email = $1
WHERE id = $2
RETURNING id, email, first_name, last_name, password, user_active, created_at, updated_at
`

type UpdateUserEmailParams struct {
	Email string      `json:"email"`
	ID    pgtype.UUID `json:"id"`
}

func (q *Queries) UpdateUserEmail(ctx context.Context, arg UpdateUserEmailParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserEmail, arg.Email, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.Password,
		&i.UserActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
